// <auto-generated />
using System;
using InsightBase.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;

#nullable disable

namespace InsightBase.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250909135246_EmbeddingEntityFKChunkUpdate")]
    partial class EmbeddingEntityFKChunkUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InsightBase.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DocumentType")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("Keywords")
                        .HasColumnType("text");

                    b.Property<string>("LegalArea")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DocumentType");

                    b.HasIndex("LegalArea");

                    b.HasIndex("PublishDate");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("InsightBase.Domain.Entities.DocumentChunk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ChunkIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentChunks");
                });

            modelBuilder.Entity("InsightBase.Domain.Entities.Embedding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("DocumentChunkId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float[]>("Vector")
                        .IsRequired()
                        .HasColumnType("real[]");

                    b.HasKey("Id");

                    b.HasIndex("DocumentChunkId")
                        .IsUnique();

                    b.ToTable("Embedding");
                });

            modelBuilder.Entity("InsightBase.Infrastructure.Persistence.EmbeddingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("DocumentChunkId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Vector>("Vector")
                        .IsRequired()
                        .HasColumnType("vector(3072)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentChunkId")
                        .IsUnique();

                    b.ToTable("Embeddings", (string)null);
                });

            modelBuilder.Entity("InsightBase.Domain.Entities.DocumentChunk", b =>
                {
                    b.HasOne("InsightBase.Domain.Entities.Document", "Document")
                        .WithMany("Chunks")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("InsightBase.Domain.Entities.Embedding", b =>
                {
                    b.HasOne("InsightBase.Domain.Entities.DocumentChunk", "DocumentChunk")
                        .WithOne("Embedding")
                        .HasForeignKey("InsightBase.Domain.Entities.Embedding", "DocumentChunkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentChunk");
                });

            modelBuilder.Entity("InsightBase.Infrastructure.Persistence.EmbeddingEntity", b =>
                {
                    b.HasOne("InsightBase.Domain.Entities.DocumentChunk", null)
                        .WithOne()
                        .HasForeignKey("InsightBase.Infrastructure.Persistence.EmbeddingEntity", "DocumentChunkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InsightBase.Domain.Entities.Document", b =>
                {
                    b.Navigation("Chunks");
                });

            modelBuilder.Entity("InsightBase.Domain.Entities.DocumentChunk", b =>
                {
                    b.Navigation("Embedding");
                });
#pragma warning restore 612, 618
        }
    }
}
